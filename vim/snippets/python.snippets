snippet #!
	#!/usr/bin/env python

# File in a module
snippet file 
	"""
	${1:A short explanation of what caused these classes and functions to be grouped together}
	"""
	__author__ = "Jiaqing WANG (`system("echo \"$(whoami)\"")`@appnexus.com)"

# Module Docstring
snippet init
	"""
	${1:Module name}

	${2:Description of what the module does.}

	Requires Python: ${3:Minimum Python requirement.}

	Changelog:
		`system("date +%Y-%m-%d")`, Jiaqing, ${4:Description of change}
	"""
	__author__ = "Jiaqing WANG (`system("echo \"$(whoami)\"")`@appnexus.com)"
	__version__ = "${5:0.0.0}"
	${6}

snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""
		${3:docstring for $1}

		Attributes:
			${4:List attributes with descriptions}
		"""
		def __init__(self, ${5:arg}):
			${6:super($1, self).__init__()}
			self.$5 = $5
			${7}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}
	
		Args:
			${4:<arg>:description}

		Returns:
			${5:None}
	
		Raises:
			${6:None}
		"""
		${7:pass}

snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet main
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
